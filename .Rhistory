geom_histogram(binwidth=1,fill="skyblue",color="black",alpha=0.7)+
labs(title="Histogram of X",x="X",y="Frequency")+
theme_minimal()
print(histogram_X)
#画出ESS随t变化的折线图
t<-seq(0,100,by=1)
ESS<-result$ESS
plot(t,ESS,type="l",col="purple")
return(result)
}
for(i in 1:100){
print(sequential_naive(0.2)$ESS[100])
}
for(i in 1:100){
x<-sequential_naive(0.2)$ESS[100]
print(x)
}
sequential_naive<-function(sigma,plot_graph){
#初值准备
N<-1000
weight<-rep(1/N,N)
rho<-0.9
partical<-list()
for(i in 1:N){
new_partical<-list()
new_partical$X0<-NA
new_partical$Y0<-NA
new_partical$X<-rep(NA,100)
new_partical$Y<-rep(NA,100)
new_partical$weight<-1/N
partical[[i]]<-new_partical
}
result<-list(X=rep(NA,100),Y=rep(NA,100),ESS=c(N,rep(NA,100)))
#获取X0和Y0
for(i in 1:1000){
partical[[i]]$X0<-rnorm(1,mean=0,sd=sqrt(1/(1-rho^2)))
partical[[i]]$Y0<-rnorm(1,mean=0,sd=sigma/sqrt(1-rho^2))
}
random<-sample(1:1000,1)
result$X0<-partical[[random]]$X0
result$Y0<-partical[[random]]$Y0
#进行100次抽样
for(t in 1:100){
#更新每个粒子的当前状态
for(i in 1:N){
if(t==1){
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=1)
}
else{
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=1)
}
}
#更新每个粒子的当前权重
for(i in 1:N){
if(t==1){
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
}
else{
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
}
}
#对权重进行归一化处理
currentweight<-sapply(partical,function(x) x$weight)
currentweight<-currentweight/sum(currentweight)
for(i in 1:N) {
partical[[i]]$weight<-currentweight[i]
}
#如果ESS过小需要再次更新权重
ESS<-(sum(currentweight))^2/(sum(currentweight^2))
result$ESS[t+1]<-ESS
if(ESS<500){
for(i in 1:N){
partical[[i]]$weight<-1/N
}
}
#按更新后的权重抽样
currentweight<-numeric(N)
for(i in 1:N){
currentweight[i]<-partical[[i]]$weight
}
random<-sample(1:1000,1,prob=currentweight)
result$X[t]<-partical[[random]]$X[t]
result$Y[t]<-partical[[random]]$Y[t]
}
#画出频率分布直方图
if(plot_graph){
X<-result$X
ESS<-result$ESS
library(ggplot2)
histogram_X<-ggplot(data=NULL, aes(x=X))+
geom_histogram(binwidth=1,fill="skyblue",color="black",alpha=0.7)+
labs(title="Histogram of X",x="X",y="Frequency")+
theme_minimal()
print(histogram_X)
#画出ESS随t变化的折线图
t<-seq(0,100,by=1)
ESS<-result$ESS
plot(t,ESS,type="l",col="purple")
}
return(result)
}
for(i in 1:100){
x<-sequential_naive(0.2,FALSE)$ESS[100]
print(x)
}
repeatexperiment<-function(N){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(0.2,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
return(error)
}
repeatexperiment(100)
sequential<-function(sigma,plot_graph){
#初值准备
N<-1000
weight<-rep(1/N,N)
rho<-0.9
partical<-list()
for(i in 1:N){
new_partical<-list()
new_partical$X0<-NA
new_partical$Y0<-NA
new_partical$X<-rep(NA,100)
new_partical$Y<-rep(NA,100)
new_partical$weight<-1/N
partical[[i]]<-new_partical
}
result<-list(X=rep(NA,100),Y=rep(NA,100),ESS=c(N,rep(NA,100)))
#获取X0和Y0
for(i in 1:1000){
partical[[i]]$X0<-rnorm(1,mean=0,sd=sqrt(1/(1-rho^2)))
partical[[i]]$Y0<-rnorm(1,mean=0,sd=sigma/sqrt(1-rho^2))
}
random<-sample(1:1000,1)
result$X0<-partical[[random]]$X0
result$Y0<-partical[[random]]$Y0
#进行100次抽样
for(t in 1:100){
#更新每个粒子的当前状态
for(i in 1:N){
if(t==1){
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=(rho*partical[[i]]$X0+partical[[i]]$Y[t]/sigma^2)/(2-rho^2+1/sigma^2),sd=sqrt(1/(2-rho^2+sigma^2)))
}
else{
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=(rho*partical[[i]]$X[t-1]+partical[[i]]$Y[t]/sigma^2)/(2-rho^2+1/sigma^2),sd=sqrt(1/(2-rho^2+sigma^2)))
}
}
#更新每个粒子的当前权重
for(i in 1:N){
if(t==1){
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
}
else{
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
}
}
#对权重进行归一化处理
currentweight<-sapply(partical,function(x) x$weight)
currentweight<-currentweight/sum(currentweight)
for(i in 1:N) {
partical[[i]]$weight<-currentweight[i]
}
#如果ESS过小需要再次更新权重
ESS<-(sum(currentweight))^2/(sum(currentweight^2))
result$ESS[t+1]<-ESS
if(ESS<500){
for(i in 1:N){
partical[[i]]$weight<-1/N
}
}
#按更新后的权重抽样
currentweight<-numeric(N)
for(i in 1:N){
currentweight[i]<-partical[[i]]$weight
}
random<-sample(1:1000,1,prob=currentweight)
result$X[t]<-partical[[random]]$X[t]
result$Y[t]<-partical[[random]]$Y[t]
}
if(plot_graph){
#画出频率分布直方图
X<-result$X
ESS<-result$ESS
library(ggplot2)
histogram_X<-ggplot(data=NULL, aes(x=X))+
geom_histogram(binwidth=1,fill="skyblue",color="black",alpha=0.7)+
labs(title="Histogram of X",x="X",y="Frequency")+
theme_minimal()
print(histogram_X)
#画出ESS随t变化的折线图
t<-seq(0,100,by=1)
ESS<-result$ESS
plot(t,ESS,type="l",col="purple")
}
return(result)
}
repeatexperiment<-function(N){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(0.2,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
return(error)
}
repeatexperiment(100)
sequential_naive<-function(sigma,plot_graph){
#初值准备
N<-1000
weight<-rep(1/N,N)
rho<-0.9
partical<-list()
for(i in 1:N){
new_partical<-list()
new_partical$X0<-NA
new_partical$Y0<-NA
new_partical$X<-rep(NA,100)
new_partical$Y<-rep(NA,100)
new_partical$weight<-1/N
partical[[i]]<-new_partical
}
result<-list(X=rep(NA,100),Y=rep(NA,100),ESS=c(N,rep(NA,100)))
#获取X0和Y0
for(i in 1:1000){
partical[[i]]$X0<-rnorm(1,mean=0,sd=sqrt(1/(1-rho^2)))
partical[[i]]$Y0<-rnorm(1,mean=0,sd=sigma/sqrt(1-rho^2))
}
random<-sample(1:1000,1)
result$X0<-partical[[random]]$X0
result$Y0<-partical[[random]]$Y0
#进行100次抽样
for(t in 1:100){
#更新每个粒子的当前状态
for(i in 1:N){
if(t==1){
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=1)
}
else{
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=1)
}
}
#更新每个粒子的当前权重
for(i in 1:N){
if(t==1){
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
}
else{
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
}
}
#对权重进行归一化处理
currentweight<-sapply(partical,function(x) x$weight)
currentweight<-currentweight/sum(currentweight)
for(i in 1:N) {
partical[[i]]$weight<-currentweight[i]
}
#如果ESS过小需要再次更新权重
ESS<-(sum(currentweight))^2/(sum(currentweight^2))
result$ESS[t+1]<-ESS
if(ESS<500){
for(i in 1:N){
partical[[i]]$weight<-1/N
}
}
#按更新后的权重抽样
currentweight<-numeric(N)
for(i in 1:N){
currentweight[i]<-partical[[i]]$weight
}
random<-sample(1:1000,1,prob=currentweight)
result$X[t]<-partical[[random]]$X[t]
result$Y[t]<-partical[[random]]$Y[t]
}
#画出频率分布直方图
if(plot_graph){
X<-result$X
ESS<-result$ESS
library(ggplot2)
histogram_X<-ggplot(data=NULL, aes(x=X))+
geom_histogram(binwidth=1,fill="skyblue",color="black",alpha=0.7)+
labs(title="Histogram of X",x="X",y="Frequency")+
theme_minimal()
print(histogram_X)
#画出ESS随t变化的折线图
t<-seq(0,100,by=1)
ESS<-result$ESS
plot(t,ESS,type="l",col="purple")
}
return(result)
}
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(100,0.2)
repeatexperiment<-function(N,sigma){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(sigma,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
return(error)
}
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(100,0.2)
repeatexperiment(100,0.8)
repeatexperiment<-function(N,sigma){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(sigma,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
return(error)
t<-seq(0,100,by=1)
plot(t,error,type="l",col="green")
}
repeatexperiment(100,0.2)
repeatexperiment<-function(N,sigma){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(sigma,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
t<-seq(0,100,by=1)
plot(t,error,type="l",col="green")
return(error)
}
repeatexperiment(100,0.2)
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(100,0.2)
repeatexperiment(100,0.8)
repeatexperiment<-function(N,sigma){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(sigma,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
t<-seq(0,100,by=1)
plot(t,error,type="l",ylim=c(0,2),col="green")
return(error)
}
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(100,0.2)
repeatexperiment(100,0.8)
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(1000,0.2)
sequential<-function(sigma,plot_graph){
#初值准备
N<-1000
weight<-rep(1/N,N)
rho<-0.9
partical<-list()
for(i in 1:N){
new_partical<-list()
new_partical$X0<-NA
new_partical$Y0<-NA
new_partical$X<-rep(NA,100)
new_partical$Y<-rep(NA,100)
new_partical$weight<-1/N
partical[[i]]<-new_partical
}
result<-list(X=rep(NA,100),Y=rep(NA,100),ESS=c(N,rep(NA,100)))
#获取X0和Y0
for(i in 1:1000){
partical[[i]]$X0<-rnorm(1,mean=0,sd=sqrt(1/(1-rho^2)))
partical[[i]]$Y0<-rnorm(1,mean=0,sd=sigma/sqrt(1-rho^2))
}
random<-sample(1:1000,1)
result$X0<-partical[[random]]$X0
result$Y0<-partical[[random]]$Y0
#进行100次抽样
for(t in 1:100){
#更新每个粒子的当前状态
for(i in 1:N){
if(t==1){
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=(rho*partical[[i]]$X0+partical[[i]]$Y[t]/sigma^2)/(2-rho^2+1/sigma^2),sd=sqrt(1/(2-rho^2+sigma^2)))
}
else{
partical[[i]]$Y[t]<-rnorm(1,mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
partical[[i]]$X[t]<-rnorm(1,mean=(rho*partical[[i]]$X[t-1]+partical[[i]]$Y[t]/sigma^2)/(2-rho^2+1/sigma^2),sd=sqrt(1/(2-rho^2+sigma^2)))
}
}
#更新每个粒子的当前权重
for(i in 1:N){
if(t==1){
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X0,sd=sqrt(1+sigma^2))
}
else{
partical[[i]]$weight<-partical[[i]]$weight*dnorm(partical[[i]]$Y[t],mean=rho*partical[[i]]$X[t-1],sd=sqrt(1+sigma^2))
}
}
#对权重进行归一化处理
currentweight<-sapply(partical,function(x) x$weight)
currentweight<-currentweight/sum(currentweight)
for(i in 1:N) {
partical[[i]]$weight<-currentweight[i]
}
#如果ESS过小需要再次更新权重
ESS<-(sum(currentweight))^2/(sum(currentweight^2))
result$ESS[t+1]<-ESS
if(ESS<500){
for(i in 1:N){
partical[[i]]$weight<-1/N
}
}
#按更新后的权重抽样
currentweight<-numeric(N)
for(i in 1:N){
currentweight[i]<-partical[[i]]$weight
}
random<-sample(1:1000,1,prob=currentweight)
result$X[t]<-partical[[random]]$X[t]
result$Y[t]<-partical[[random]]$Y[t]
}
if(plot_graph){
#画出频率分布直方图
X<-result$X
ESS<-result$ESS
library(ggplot2)
histogram_X<-ggplot(data=NULL, aes(x=X))+
geom_histogram(binwidth=1,fill="skyblue",color="black",alpha=0.7)+
labs(title="Histogram of X",x="X",y="Frequency")+
theme_minimal()
print(histogram_X)
#画出ESS随t变化的折线图
t<-seq(0,100,by=1)
ESS<-result$ESS
plot(t,ESS,type="l",col="purple")
}
return(result)
}
sequential(0.2,TRUE)
sequential(0.8,TRUE)
sequential_naive(0.8,TRUE)
repeatexperiment(50,0.2)
repeatexperiment(50,0.8)
repeatexperiment<-function(N,sigma){
error<-rep(NA,101)
result_matrix<-matrix(NA,nrow=N,ncol=202)
for(i in 1:N){
tmp<-sequential(sigma,FALSE)
result_matrix[i,1]<-tmp$X0
result_matrix[i,102]<-tmp$Y0
result_matrix[i,2:101]<-tmp$X
result_matrix[i,103:202]<-tmp$Y
}
for(t in 1:101){
error[t]<-sum((result_matrix[,t]-result_matrix[,t+101])^2)/N
}
t<-seq(0,100,by=1)
plot(t,error,type="l",ylim=c(0,2),col="green")
print(c(mean(error),var(error)))
return(error)
}
repeatexperiment(50,0.2)
repeatexperiment(50,0.8)
repeatexperiment(100,0.2)
repeatexperiment(100,0.8)
